<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/salesz9902/prog1/blob/master/mandelbrot.cpp">https://github.com/salesz9902/prog1/blob/master/mandelbrot.cpp</link>            
        </para>
        <para>
            A Mandelbrot-halmaz a komplex számsíkon különböző pontok halmaza. Van rá egy rekurzív sorozat, amely abszolút értékben korlátos.
        </para> 
        <para>
            A rekurzív sorozat az alábbi:
            <function>
                x<subscript>n+1</subscript>:=(x<subscript>n</subscript>)<superscript>2</superscript> + c
            </function>
        </para>
        <para>
            A fenti C++ programban a Mandelbrot-halmazt fogjuk ábrázolni, mégpedig egy <code>.png</code> kiterjesztésű képen.
        </para>
        <para>
            Miután lefordítottuk a kódunkat a következőképpen:
            <programlisting>
                g++ mandelbrot.cpp -lpng -o mandel
            </programlisting>
            A forráskódban látszik, hogy futtatás után kapunk egy képet kimenet.png néven egész érdekes eredménnyel.
        </para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/salesz9902/prog1/blob/master/mandelbrot2.cpp">https://github.com/salesz9902/prog1/blob/master/mandelbrot2.cpp</link>       
        </para>
        <para>
            Ebben a feladatban György Dóra tutoráltja voltam.
        </para>
        <para>
            Ezzel a programmal szintén a Mandelbrot-halmazt ábrázoljuk, viszont itt már <code>std::complex</code> osztállyal tesszük meg struktúra alkalmazása helyett.
            Miután fordítottuk, itt is ugyanazt a képet láthatjuk futtatásnál, mint az előbbinél, csupán a forráskód van másképp kivitelezve.
        </para> 
        <para>
            Itt elhagyjuk a struktúra használatát, helyette osztályt használunk. Talán a struktúra használata talán előnyösebb bizonyos szempontokból, bár egyáltalán
            nincs köztük olyan nagy különbség, hogy erős okunk legyen rá.
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/salesz9902/prog1/blob/master/biomorf.cpp">https://github.com/salesz9902/prog1/blob/master/biomorf.cpp</link>
        </para>
        <para>
            A biomorfok jelentősen közel állnak a Mandelbrot-halmazhoz, ugyanis itt szintén a komplex számsíkkal dolgozik a programunk.
        </para>      
        <para>
            Programunk fordítása után, a következőképpen futtassuk:
            <programlisting>
                ./bmorf bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
            </programlisting>
            A fenti esetben ismét egy <code>png</code> kiterjesztésű fájlt fogunk kapni, mégpedig bmorf.png néven. Itt már sokkal színgazdagabb formát fogunk kapni, ami picit látványosabb is.
        </para>                  
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Szintén egy összetett feladattal állunk szemben. Ahhoz, hogy megfelelően tudjuk fordítani/futtatni a programot, telepítenünk kell az 
            <code>nvidia-cuda-toolkit</code> nevű csomagot.
        </para>
        <para>
            A programunk konkrétan optimalizálni próbálja a "munkánkat", egy gyorsabb számolást eredményez a háttérben, ami nagyon sok esetben nagy segítségünkre 
            lehet, hiszen ki ne akarná, hogy gyorsabban dolgozzon a gépe.
        </para>
        <para>
            Az optimalizásálásról már korábban is volt szó a könyvben, mégpedig a legelső feladatunkban például, ahol OpenMP segítségével osztottuk fel processzormagokra 
            a végrehajtandó "munkát".
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
            Megoldás forrása:  
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/salesz9902/prog1/tree/master/mandelzoom">https://github.com/salesz9902/prog1/tree/master/mandelzoom</link>
        </para>
        <para>
            Ebben a feladatban egy GUI-t fogunk létrehozni a Qt Creator szoftverrel. (Ez egy multiplatformos keretrendszer, amit épp erre (is) találtak ki.)
        </para>
        <para>
            Tehát itt arról van szó, hogy a Qt Creatorban létre tudunk könnyen hozni egy grafikus felületet az előző C++ kódunkhoz, a Mandelbrot-hoz.
        </para>
        <para>
            YouTube-on rengeteg oktatóvideót találhatunk a Qt Creator szoftverről. Itt is van egy:
        </para>
        <para>
            <link href="https://www.youtube.com/watch?v=3SIj6zL6mmA">https://www.youtube.com/watch?v=3SIj6zL6mmA</link>
        </para>
        <para>
            Ebből a videóból már tényleg gond nélkül elindulhatunk egy úton a GUI szerkesztés felé. 
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Hasonló szituációban vagyunk, mint az előző feladatnál. Annyi változik, hogy már egy jóval felhasználóközelibb, magasabb szintű programozási nyelven 
            valósítjuk meg, a Javaban.
        </para>
        <para>
            Itt is rengeteg keretrendszerünk van. A programban nagy a testreszabhatóság lehetősége. Mi magunk adhatjuk meg több paramétereit is a programunk elindulásakor 
            felnyíló ablaknak stb. 
        </para>
        <para>
            A konstruktorban beállíthatjuk a Mandelbrot halmaz paramétereit. Például az élességet. Ami még érdekes lehet számunkra, az nem más, mint a BufferedImage típus, 
            amit a Java biztosít számunkra. Ez tulajdonképpen egy osztály, ami lehetőséget ad, hogy külső könyvtár használata nélkül is képesek legyünk egyszerűen képfájlokat létrehozni.
        </para>
    </section>

</chapter>                
